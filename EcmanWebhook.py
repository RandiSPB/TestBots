import telebot
from telebot import apihelper
from telebot import types
from openpyxl import load_workbook
from telebot import apihelper
import re
import re
import os
from dotenv import load_dotenv
from threading import Timer
import cherrypy
import datetime


def parse_from_xlsx_data(data):
    pass


class PaulEcmanTest:
    def __init__(self, user_id, bot_ref, texts):
        self.timer = None
        self.id = user_id
        self.texts = texts
        self.bot = bot_ref
        self.buffer = None
        self.state = 'START'
        self.flag = None
        self.cur_question_ptr = 0
        self.answers = ('sadness', 'disgust', 'sadness', 'pleasure', 'anger', 'fear', 'disgust', 'anger', 'anger',
                        'fear', 'anger', 'fear', 'surprise', 'contempt')
        self.score = 0

    def change_state(self, new_state):
        self.state = new_state

    def return_cur_text(self):
        return self.texts[self.state]

    def start_timer(self):
        self.timer = Timer(3, self.edit_photo)
        self.timer.start()

    def edit_photo(self):
        self.bot.delete_message(self.buffer.chat.id, self.buffer.message_id)
        text = f'<b>–§–æ—Ç–æ {self.cur_question_ptr + 1} –∏–∑ 14</b>\n\n–ö–∞–∫–∞—è —ç–º–æ—Ü–∏—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–π, —á—Ç–æ –≤—ã' \
               f' —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–≤–∏–¥–µ–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?'
        markup = types.InlineKeyboardMarkup(row_width=2)
        button_labels = ('–ì–Ω–µ–≤', '–°—Ç—Ä–∞—Ö', '–ü–µ—á–∞–ª—å', '–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ', '–ü—Ä–µ–∑—Ä–µ–Ω–∏–µ', '–£–¥–∏–≤–ª–µ–Ω–∏–µ', '–£–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ')
        button_callbacks = ('0_0_anger', '0_1_fear', '1_0_sadness', '1_1_disgust', '2_0_contempt', '2_1_surprise',
                            '3_0_pleasure')
        markup.add(*[types.InlineKeyboardButton(text=i, callback_data=j) for i, j in zip(button_labels,
                                                                                         button_callbacks)])
        self.bot.send_message(self.buffer.chat.id, text=text, reply_markup=markup, parse_mode='html')

    def validate_editing(self, new_args):
        pass

    def handler(self, call):
        if call.data != 'NO_CB':
            row, number, emotion = call.data.split('_')
            print(call.message.json['reply_markup']['inline_keyboard'])
            if emotion == self.answers[self.cur_question_ptr]:
                self.score += 1
            text = f"<b>‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ " \
                   f"{call.message.json['reply_markup']['inline_keyboard'][int(row)][int(number)]['text']}</b>"
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=text, reply_markup=None, parse_mode='html')
            self.cur_question_ptr += 1
            self.send_question(call.message.chat.id)
        else:
            self.bot.send_message(call.message.chat.id, '–ù–µ –Ω–∞–¥–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É')

    def disclaimer(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data='START_TEST'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def start(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏', callback_data='CALL_DISC'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def send_question(self, chat_id):
        try:
            with open(os.path.join('content', f'{self.cur_question_ptr + 1}.jpg'), 'rb') as emotion_photo:
                self.buffer = self.bot.send_photo(chat_id, emotion_photo, caption=f'<b>–§–æ—Ç–æ {self.cur_question_ptr + 1}'
                                                                                  f' –∏–∑ 14</b>', parse_mode='html')
                self.start_timer()
        except (IndexError, FileNotFoundError):
            self.finish_test(chat_id)

    def finish_test(self, chat_id):
        text = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π!\n\n<b>–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.score}</b>'
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='html')

    def start_test(self, chat_id):
        self.send_question(chat_id)


class SimpleUserPaulEcmanTest:
    def __init__(self, msg, bot_ref, texts):
        self.on_test = False
        self.bot = bot_ref
        self.id = msg.chat.id
        self.try_times = 0
        self.test = PaulEcmanTest(msg.chat.id, bot_ref, texts)
        self.auth(msg)


    def handler(self, message):
        if self.on_test:
            self.bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç!')
        else:
            self.on_test = True
            self.test.start(message.chat.id)

    def auth(self, msg):
        self.bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</b> –∏'
                                           ' –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>HW2L</i>', parse_mode='html')
        self.bot.register_next_step_handler(msg, self.get_code)

    def get_code(self, msg):
        date = datetime.datetime.now()
        date += datetime.timedelta(seconds=3600 * 3)
        key = f'SW{date.month}{date.day}{str(date.year)[2::]}'
        print(key)
        if msg.text == key:
            with open('logger.txt', 'a') as logger:
                logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–ü–æ–ª–ª –≠–∫–º–∞–Ω"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                             f' - {datetime.datetime.today()}\n')
            self.test.change_state('START')
            self.on_test = True
            self.test.start(msg.chat.id)
        else:
            self.try_times += 1
            if self.try_times <= 5:
                self.bot.send_message(msg.chat.id, f'–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–¥ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ '
                                                   f'–ø–æ–ø—ã—Ç–∫—É.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{6 - self.try_times}</b>',
                                      parse_mode='html')
                self.bot.register_next_step_handler(msg, self.get_code)
            else:
                self.test.change_state('BLOCKED')
                with open('logger.txt', 'a') as logger:
                    logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–ü–æ–ª–ª –≠–∫–º–∞–Ω"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!  - '
                                 f'{datetime.datetime.today()}\n')
                self.bot.send_message(msg.chat.id, '–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ'
                                                   ' –ø—Ä–æ–±–ª–µ–º—É –õ–∏–Ω–µ, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç ;)\n@lina_chandler')

    def callback_handler(self, call):
        if call.data == 'CALL_DISC':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.change_state('DISCLAIMER')
            self.test.disclaimer(call.message.chat.id)

        elif call.data == 'START_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.start_test(call.message.chat.id)

        elif call.data == 'RESTART_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=None, parse_mode='html')
            self.test = PaulEcmanTest(call.message.chat.id, self.bot, self.test.texts)
            self.test.start(call.message.chat.id)
        else:
            self.test.handler(call)


env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
API_TOKEN = os.getenv('API_TOKEN_PAUL_ECMAN')
bot = telebot.TeleBot(API_TOKEN)
users = {}
texts_literal = {
        'DISCLAIMER': '–û—Ç–ª–∏—á–Ω–æ!\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\nüîπ–í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ 14 '
                      '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —è—Ä–∫–æ–≥–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —ç–º–æ—Ü–∏–π\n\n‚è±–ù–∞ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–º –±—É–¥–µ—Ç –¥–∞–Ω–æ 3'
                      ' —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ "—Å—á–∏—Ç–∞—Ç—å" —ç–º–æ—Ü–∏—é.\n\n‚úÖ–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π '
                      '—Ç—É, –∫–æ—Ç–æ—Ä–∞—è, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—é –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.',
        'START': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å üëãüèº\n\n<b>–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π?</b>'
    }


@bot.message_handler(content_types='text')
def handler(message):
    if message.text == '/start':
        try:
            users[message.chat.id].handler(message)
        except KeyError:
            users[message.chat.id] = SimpleUserPaulEcmanTest(message, bot, texts_literal)
    elif users[message.chat.id].test.state == 'BLOCKED':
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                          'e –∫–Ω–æ–ø–∫–∏! :)')
    else:
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏! :)')


@bot.callback_query_handler(func=lambda call: True)
def smo(call):
    try:
        users[call.message.chat.id].callback_handler(call)
    except KeyError as e:
        users[call.message.chat.id] = SimpleUserPaulEcmanTest(call.message, bot, texts_literal)


class WebhookServer(object):
    # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 7773,
        'engine.autoreload.on': False
    })
    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
