import telebot
from telebot import apihelper
import random
from telebot import types
from openpyxl import load_workbook
from telebot import apihelper
import re
import re
import os
from dotenv import load_dotenv
from SimpleNaturalLanguageProccesor import NaturalLanguageProcessor
from threading import Timer
import cherrypy
import datetime


def parse_from_xlsx_data(data):
    pass


class CreativeThinkingTest:
    def __init__(self, bot_ref, texts, nlp_ref, words=('—è', '–º–Ω–µ', '–º–µ–Ω—è', '–º–Ω–æ–π', '–º–æ–µ', '–º–æ—è', '–º–æ–∏', '–º–æ–µ–≥–æ', '–º–æ–µ–π',
                                                       '–º–æ–∏—Ö', '–º–æ–µ–º—É', '–º–æ–∏–º', '–º–æ—é', '–º–æ–∏–º–∏', '–æ –º–æ–µ–º', '–æ –º–æ–µ–π',
                                                       '–æ –º–æ–∏—Ö', '–º–Ω–æ—é', '–º–æ–π', '–ø–æ-–º–æ–µ–º—É', '–º–æ—ë')):
        self.natural_language_processor = nlp_ref
        self.texts = texts
        self.bot = bot_ref
        self.timer = None
        self.tmp = None
        self.state = 'START'
        self.flag = None
        self.cur_question = 1
        self.msg = None
        self.word_base = self.creating_word_base(words)
        self.questions = ['–õ–µ—Ç —Ç–∞–∫ —á–µ—Ä–µ–∑ –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å ...', '–í –ø—Ä–æ—à–ª–æ–º ...', '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è ...', '–£—Å–ª–æ–≤–∏–µ –¥–ª—è ...',
                          '–ü—Ä–∏–Ω–∏–º–∞—è –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ ...', '–í —Å–ª—É—á–∞–µ ...', '–ï—Å–ª–∏ –±—ã –¥–∞–∂–µ ...', '–î–æ —Å–∏—Ö –ø–æ—Ä ...',
                          '–° –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ...', '–¢–æ–ª—å–∫–æ —Å —Ç–µ—Ö –ø–æ—Ä –∫–∞–∫ ...', '–õ–µ–≥—á–µ –≤—Å–µ–≥–æ ...', '–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ...',
                          '–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ ...', '–ß–µ–º –¥–æ–ª—å—à–µ ...', '–ñ–∞–ª—å, —á—Ç–æ ...',  '–ù–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–æ–º—É –Ω–∞–∑–∞–¥ ...',
                          '–ù–µ–ø—Ä–∞–≤–¥–∞, —á—Ç–æ ...', '–ü—Ä–∏–¥–µ—Ç —Ç–∞–∫–æ–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ ...', '–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ ...',
                          '–í—Ä—è–¥ –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ ...']

    def set_timer(self, seconds: int, func_name) -> Timer:
        return Timer(seconds, func_name)

    def timer1_alert(self) -> None:
        chat_id = self.tmp
        self.bot.send_message(chat_id, '<b>–û–π-–æ–π!\nüî∂–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç</b>\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å '
                                       '–æ—Ç–≤–µ—Ç –≤ –ø–æ–ª–µ –Ω–∏–∂–µ', parse_mode='html')
        self.timer = self.set_timer(300, self.timers_end)
        self.timer.start()

    def timers_end(self) -> None:
        chat_id = self.tmp
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, '<b>–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è üòî</b>\n\n–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ —Ä–∞–∑?',
                              reply_markup=markup, parse_mode='html')

    @staticmethod
    def creating_word_base(words):
        return {i: 0 for i in words}

    def change_state(self, new_state):
        self.state = new_state

    def return_cur_text(self):
        return self.texts[self.state]

    def input_answer(self, message):
        self.natural_language_processor.simple_process(self.word_base, message.text)
        print(self.word_base)
        self.send_question(message.chat.id)

    def disclaimer(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data='START_TEST'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def start(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏', callback_data='CALL_DISC'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def send_question(self, chat_id):
        try:
            cur_question = random.choice(self.questions)
            self.bot.send_message(chat_id, f'{self.cur_question} –∏–∑ 20\n\n<b>{cur_question}</b>\n\n<i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ '
                                           f'—Ñ—Ä–∞–∑—É –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</i>', parse_mode='html')
            self.questions.pop(self.questions.index(cur_question))
            self.cur_question += 1
        except IndexError:
            self.finish_test(chat_id)

    def finish_test(self, chat_id):
        self.change_state('END_TEST')
        text = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!\n\n<b>–í–∞—à –∏–Ω–¥–µ–∫—Å: {sum(list(self.word_base.values()))}</b>\n\n–ü–æ–¥—Ä–æ–±–Ω—É—é'\
               f' –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –í—ã —É–∑–Ω–∞–µ—Ç–µ —É —Ç—Ä–µ–Ω–µ—Ä–∞\n\n–£—Å–ø–µ—Ö–æ–≤!'
        self.timer.cancel()
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='html')

    def start_test(self, chat_id):
        self.tmp = chat_id
        self.timer = self.set_timer(600, self.timer1_alert)
        self.timer.start()
        self.change_state('INPUT_ANSWER')
        self.send_question(chat_id)


class SimpleUserCreativeThinkingTest:
    def __init__(self, msg, bot_ref, texts, nlp_ref):
        self.on_test = False
        self.bot = bot_ref
        self.try_times = 0
        self.id = msg.chat.id
        self.test = CreativeThinkingTest(bot_ref, texts, nlp_ref)
        self.auth(msg)

    def auth(self, msg):
        self.bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</b> –∏'
                                           ' –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>HW2L</i>', parse_mode='html')
        self.bot.register_next_step_handler(msg, self.get_code)

    def get_code(self, msg):
        date = datetime.datetime.now()
        date += datetime.timedelta(seconds=3600 * 3)
        key = f'SW{date.month}{date.day}{str(date.year)[2::]}'
        print(key)
        if msg.text == key:
            with open('logger.txt', 'a') as logger:
                logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                             f' - {datetime.datetime.today()}\n')
            self.test.change_state('START')
            self.on_test = True
            self.test.start(msg.chat.id)
        else:
            self.try_times += 1
            if self.try_times <= 5:
                self.bot.send_message(msg.chat.id, f'–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–¥ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ '
                                                   f'–ø–æ–ø—ã—Ç–∫—É.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{6 - self.try_times}</b>',
                                      parse_mode='html')
                self.bot.register_next_step_handler(msg, self.get_code)
            else:
                self.test.change_state('BLOCKED')
                with open('logger.txt', 'a') as logger:
                    logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!  - '
                                 f'{datetime.datetime.today()}\n')
                self.bot.send_message(msg.chat.id, '–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ'
                                                   ' –ø—Ä–æ–±–ª–µ–º—É –õ–∏–Ω–µ, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç ;)\n@lina_chandler')

    def callback_handler(self, call):
        self.test.msg = call.message
        if call.data == 'CALL_DISC':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.change_state('DISCLAIMER')
            self.test.disclaimer(call.message.chat.id)

        elif call.data == 'START_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.start_test(call.message.chat.id)

        elif call.data == 'RESTART_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=None, parse_mode='html')
            self.test = CreativeThinkingTest(self.bot, self.test.texts, self.test.natural_language_processor)
            self.test.start(call.message.chat.id)


env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
natural_language_processor = NaturalLanguageProcessor()
API_TOKEN = os.getenv('API_TOKEN_CREATIVE_THINKING')
bot = telebot.TeleBot(API_TOKEN)
users = {}
texts_literal = {
        'DISCLAIMER': '–û—Ç–ª–∏—á–Ω–æ!\n\n<b>‚òù–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 20 '
                      '–Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å '
                      '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –º—ã—Å–ª—å.\n\n<b>‚úÖ–°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏—à–µ–¥—à–µ–µ –≤ '
                      '–≥–æ–ª–æ–≤—É</b> –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n–ü–∏—à–∏—Ç–µ –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞, —ç—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å '
                      '–≤–∞–º–∏ –∏ –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ —É–≤–∏–¥–∏—Ç. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ.\n\n‚è∞–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n'
                      '<b>15 –º–∏–Ω—É—Ç.</b>\n\n–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏? üòä',
        'START': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n<b>–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ?</b>'
    }


@bot.message_handler(content_types='text')
def handler(message):
    if message.text == '/start':
        try:
            users[message.chat.id].handler(message)
        except KeyError:
            users[message.chat.id] = SimpleUserCreativeThinkingTest(message, bot, texts_literal,
                                                                        natural_language_processor)
    else:
        if users[message.chat.id].test.state == 'INPUT_ANSWER':
            users[message.chat.id].test.input_answer(message)
        elif users[message.chat.id].test.state == 'BLOCKED':
            bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                              'e –∫–Ω–æ–ø–∫–∏! :)')
        else:
            bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                                  'e –∫–Ω–æ–ø–∫–∏! :)')


@bot.callback_query_handler(func=lambda call: True)
def smo(call):
    try:
        users[call.message.chat.id].callback_handler(call)
    except KeyError as e:
        users[call.message.chat.id] = SimpleUserCreativeThinkingTest(call.message, bot, texts_literal,
                                                                         natural_language_processor)

class WebhookServer(object):
    # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 7772,
        'engine.autoreload.on': False
    })
    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})


