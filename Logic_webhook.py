import telebot
from telebot import apihelper
import random
import datetime
from telebot import types
from openpyxl import load_workbook
from telebot import apihelper
import re
import re
import os
from dotenv import load_dotenv
from threading import Timer
import cherrypy


def create_test_data(path='LOGIC.xlsx', rows=50, cols=5):
    test = {}
    wb = load_workbook(filename=path)
    sheet = wb.active
    alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    res = []
    for i in range(2, rows):
        col = []
        for j in range(cols):
            tmp = ''.join((alph[j], str(i)))
            col.append(sheet[tmp].value)
        if col[0] is None:
            col = col[2:5]
        res.append(col)
    print(res)
    for i in res:
        if len(i) != 3:
            tmp = i[1:5]
            test.update([(tmp[0], {'a_numbers': [], 'answers': [], 'scores': []})])
            test[tmp[0]]['a_numbers'].append(tmp[1])
            test[tmp[0]]['answers'].append(tmp[2])
            test[tmp[0]]['scores'].append(tmp[3])
        else:
            test[tmp[0]]['a_numbers'].append(i[0])
            test[tmp[0]]['answers'].append(i[1])
            test[tmp[0]]['scores'].append(i[2])
    return test


class LogicTest:
    def __init__(self, bot_ref, texts):
        self.texts = texts
        self.bot = bot_ref
        self.timer = None
        self.tmp = None
        self.state = 'NO_REG'
        self.q_ptr = 0
        self.score = 0
        self.correct_answer = None
        self.flag = None
        self.cur_question = 1
        self.msg = None
        self.questions = create_test_data()

    def set_timer(self, seconds: int, func_name) -> Timer:
        return Timer(seconds, func_name)

    def timer1_alert(self) -> None:
        chat_id = self.tmp
        self.bot.send_message(chat_id, '<b>–û–π-–æ–π!\nüî∂–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç</b>\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å '
                                       '–æ—Ç–≤–µ—Ç –≤ –ø–æ–ª–µ –Ω–∏–∂–µ', parse_mode='html')
        self.timer = self.set_timer(300, self.timers_end)
        self.timer.start()

    def timers_end(self) -> None:
        chat_id = self.tmp
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, '<b>–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è üòî</b>\n\n–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ —Ä–∞–∑?',
                              reply_markup=markup, parse_mode='html')

    @staticmethod
    def creating_word_base(words):
        return {i: 0 for i in words}

    def change_state(self, new_state):
        self.state = new_state

    def return_cur_text(self):
        return self.texts[self.state]

    def input_answer(self, message):
        tmp = 0
        answ = [int(i) for i in re.findall(r'\d', message.text)]
        print(answ)
        if len(answ) == 0:
            self.bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
        elif self.q_ptr <= 5 and (len(answ) >= 2 or 0 in answ or max(answ) > 2):
            self.bot.send_message(message.chat.id, '–¢—É—Ç –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ ü§ì\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç '
                                                   '–æ—Ç–≤–µ—Ç–∞ 1 –∏–ª–∏ 2 –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ.')
        elif 0 in answ and len(answ) >= 2:
            self.bot.send_message(message.chat.id, '–í—ã —Å–ª–æ–º–∞–ª–∏ –º–æ—é –ª–æ–≥–∏–∫—É)\n\n–ï—Å–ª–∏ –≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å—Ç—å, —Ç–æ–≥–¥–∞ –∑–∞—á–µ–º –≤—ã –ø–∏—à–µ—Ç–µ 0? ü§ì\n\n'
                                  '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º,'
                                  ' –ª–∏–±–æ –≤–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É(—ã) –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.</b>', parse_mode='html')
        elif max(answ) > 5:
            self.bot.send_message(message.chat.id,
                                  '–í—ã —Å–ª–æ–º–∞–ª–∏ –º–æ—é –ª–æ–≥–∏–∫—É ü§ì\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç 0 –¥–æ 5, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –Ω–∏—Ö\n\n'
                                  '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º, '
                                  '–ª–∏–±–æ –≤–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É(—ã) –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.</b>', parse_mode='html')
        else:
            if answ == self.correct_answer:
                self.score += 1
            self.q_ptr += 1
            self.send_question(message.chat.id)

    def disclaimer(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data='START_TEST'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def start(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏', callback_data='CALL_DISC'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def load_correct_answers(self):
        ind = self.questions[list(self.questions.keys())[self.q_ptr]]['scores']
        tmp = []
        for i in range(len(ind)):
            if ind[i] == 1:
                if i == 5:
                    tmp.append(0)
                else:
                    tmp.append(i + 1)

        self.correct_answer = tmp
        print(tmp)

    def return_question_text(self):
        question = list(self.questions.keys())[self.q_ptr]
        numbers, answers = self.questions[question]['a_numbers'], self.questions[question]['answers']
        answers_text = ''
        for i,j in zip(numbers, answers):
            answers_text += f'<b>{i}</b>. {j}\n'
        if self.q_ptr <=5:
            return f'<b>{self.q_ptr + 1} –∏–∑ 12</b>\n\n<b>{question}</b>\n\n{answers_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –≤–∞—à –æ—Ç–≤–µ—Ç,' \
                   f' <i>–Ω–∞–ø—Ä–∏–º–µ—Ä</i>: <b>1</b>'
        else:
            return f'<b>{self.q_ptr + 1} –∏–∑ 12</b>\n\n<b>{question}</b>\n\n{answers_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –≤–∞—à –æ—Ç–≤–µ—Ç,' \
                   f' <i>–Ω–∞–ø—Ä–∏–º–µ—Ä</i>:<b> 2</b>\n\n<i>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤–≤–æ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ ' \
                   f'–∑–∞–ø—è—Ç—É—é.</i>\n\n<i>–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç <b>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º, –≤–≤–µ–¥–∏—Ç–µ ' \
                   f'0 (–Ω–æ–ª—å)</b></i>'

    def send_question(self, chat_id):
        try:
            self.bot.send_message(chat_id, self.return_question_text(), parse_mode='html')
            self.load_correct_answers()
        except IndexError:
            self.finish_test(chat_id)

    def finish_test(self, chat_id):
        self.change_state('END_TEST')
        text = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!\n\n<b>‚úÖ–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.score}</b>\n\n<b>0-2</b>: –í–∞–º —Å—Ç–æ–∏—Ç —Å–µ—Ä—å–µ–∑–Ω–æ ' \
               f'–∑–∞–¥—É–º–∞—Ç—å—Å—è...\n\n<b>3-6</b>: –õ–æ–≥–∏–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å. –ù–æ –µ–µ –º–∞–ª–æ. –ü–æ–∫–∞–∑–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n<b>7-10</b>: –•–æ—Ä–æ—à–∏–π' \
               f' —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∏ –Ω–∞–≤—ã–∫–∏\n\n<b>11-12</b>: –ë–ª–µ—Å—Ç—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!'
        self.timer.cancel()
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='html')

    def start_test(self, chat_id):
        self.tmp = chat_id
        self.timer = self.set_timer(600, self.timer1_alert)
        self.timer.start()
        self.change_state('INPUT_ANSWER')
        self.send_question(chat_id)


class SimpleUserLogicTest:
    def __init__(self, msg, bot_ref, texts):
        self.on_test = False
        self.bot = bot_ref
        self.id = msg.chat.id
        self.try_times = 0
        self.on_test = False
        self.test = LogicTest(bot_ref, texts)
        self.auth(msg)

    def auth(self, msg):
        self.bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</b> –∏'
                                           ' –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>HW2L</i>', parse_mode='html')
        self.bot.register_next_step_handler(msg, self.get_code)

    def get_code(self, msg):
        date = datetime.datetime.now()
        date += datetime.timedelta(seconds=3600 * 3)
        key = f'SW{date.month}{date.day}{str(date.year)[2::]}'
        print(key)
        if msg.text == key:
            with open('logger.txt', 'a') as logger:
                logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–õ–æ–≥–∏–∫–∞"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                             f' - {datetime.datetime.today()}\n')
            self.test.change_state('START')
            self.test.start(msg.chat.id)
        else:
            self.try_times += 1
            if self.try_times <= 5:
                self.bot.send_message(msg.chat.id, f'–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–¥ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ '
                                                   f'–ø–æ–ø—ã—Ç–∫—É.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{6 - self.try_times}</b>',
                                      parse_mode='html')
                self.bot.register_next_step_handler(msg, self.get_code)
            else:
                self.test.change_state('BLOCKED')
                with open('logger.txt', 'a') as logger:
                    logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–õ–æ–≥–∏–∫–∞"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!  - '
                                 f'{datetime.datetime.today()}\n')
                self.bot.send_message(msg.chat.id, '–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ'
                                                   ' –ø—Ä–æ–±–ª–µ–º—É –õ–∏–Ω–µ, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç ;)\n@lina_chandler')

    def handler(self, message):
        self.bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∏—Å–∞—Ç—å –º–Ω–µ. '
                                               '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ :)')

    def callback_handler(self, call):
        self.test.msg = call.message
        if call.data == 'CALL_DISC':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.change_state('DISCLAIMER')
            self.test.disclaimer(call.message.chat.id)

        elif call.data == 'START_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.start_test(call.message.chat.id)

        elif call.data == 'RESTART_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=None, parse_mode='html')
            self.test = LogicTest(self.bot, self.test.texts)
            self.test.start(call.message.chat.id)

env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
API_TOKEN = os.getenv('API_TOKEN_LOGIC')
bot = telebot.TeleBot(API_TOKEN)
try:
    os.mkdir('logs')
    os.mkdir('logs/logic_logs')
except OSError as e:
    print(f'Already created - {e}')
users = {}
texts_literal = {
        'DISCLAIMER': '–û—Ç–ª–∏—á–Ω–æ!\n\n–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ü–µ–Ω–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ ¬´—á–∏—Å—Ç–æ¬ª –≤—ã —É–º–µ–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã —Å —Ç–æ—á–∫–∏ '
                      '–∑—Ä–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏.\n\n<b>üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n‚úÖ–í –∫–∞–∂–¥–æ–º '
                      '–∑–∞–¥–∞–Ω–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ –±—ã—Ç—å –≤–æ–æ–±—â–µ.\n\n<b>–ó–∞—Ä–∞–Ω–µ–µ '
                      '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º:</b> —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∞–±—Å—É—Ä–¥–Ω–æ, –Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ.\n\n‚è≥ –ù–∞ –≤–µ—Å—å —Ç–µ—Å—Ç '
                      '–æ—Ç–≤–æ–¥–∏—Ç—Å—è 15 –º–∏–Ω—É—Ç\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 12 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π:',
        'START': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å üëãüèº\n\n<b>–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É?</b>'
    }

@bot.message_handler(content_types='text')
def handler(message):
    if message.text == '/start':
        try:
            users[message.chat.id].handler(message)
        except KeyError:
            users[message.chat.id] = SimpleUserLogicTest(message, bot, texts_literal)
    else:
        try:
            if users[message.chat.id].test.state == 'INPUT_ANSWER':
                users[message.chat.id].test.input_answer(message)
            elif users[message.chat.id].test.state == 'BLOCKED':
                bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                                  'e –∫–Ω–æ–ø–∫–∏! :)')
            else:
                bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                                      'e –∫–Ω–æ–ø–∫–∏! :)')
        except KeyError:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <i>/start</i>', parse_mode='html')

@bot.callback_query_handler(func=lambda call: True)
def smo(call):
    try:
        users[call.message.chat.id].callback_handler(call)
    except KeyError as e:
        users[call.message.chat.id] = SimpleUserLogicTest(call.message, bot, texts_literal)

class WebhookServer(object):
    # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 7778,
        'engine.autoreload.on': False
    })
    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})