import telebot
from telebot import apihelper
from telebot import types
from openpyxl import load_workbook
from telebot import apihelper
import random
import re
import os
from dotenv import load_dotenv
import cherrypy
import datetime


def parse_from_xlsx_data(filename):
    wb = load_workbook(filename=filename)
    sheet = wb.active
    alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    questions = {}
    tmp = None
    ranges = (sheet.max_row, sheet.max_column)
    for i in range(2, 46):
        res = []
        for j in range(ranges[1]):
            cur_place = '{0}{1}'.format(alph[j], i)
            try:
                res.append(sheet[cur_place].value)
            except TypeError:
                continue
        if res[1] not in questions.keys():
            questions[res[1]] = []
            questions[res[1]].append(res)
        else:
            questions[res[1]].append(res)
            questions[res[1]] = questions[res[1]]
    return questions


class PSTest:
    def __init__(self, filename, bot_ref, texts):
        self.texts = texts
        self.bot = bot_ref
        self.state = 'START'
        self.values_buffer = None
        self.bad_action = 0
        self.cur_question = 1
        self.flag = None
        self.questions = parse_from_xlsx_data(filename)
        self.l_scores = 0
        self.r_scores = 0

    def change_state(self, new_state):
        self.state = new_state

    def return_cur_text(self):
        return self.texts[self.state]

    def return_cur_question_format(self, q_data):
        return f'<b>{self.cur_question}</b>. –ß–∞—â–µ –≤—Å–µ–≥–æ...\n\n<b>A. </b>{q_data[0][0]}\n<b>B. </b>{q_data[1][0]}'

    def validate_editing(self, new_args):
        pass

    def handler(self, call):

        if call.data == 'change':
            self.l_scores -= self.values_buffer[0]
            self.r_scores -= self.values_buffer[1]
            e_markup = types.InlineKeyboardMarkup(row_width=1)
            e_markup.add(types.InlineKeyboardButton(text='‚úÖ–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='NO_CB'))
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=e_markup, parse_mode='html')
            self.send_question(call.message.chat.id)

        elif call.data == 'next_question':
            e_markup = types.InlineKeyboardMarkup(row_width=1)
            e_markup.add(types.InlineKeyboardButton(text='‚úÖ–í—Å–µ –≤–µ—Ä–Ω–æ', callback_data='NO_CB'))
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=e_markup, parse_mode='html')
            self.cur_question += 1
            self.send_question(call.message.chat.id)

        elif call.data[0] == 'Q':
            a_num, a_type = call.data.split('_')[2::]
            e_markup = types.InlineKeyboardMarkup(row_width=1)
            e_markup.add(types.InlineKeyboardButton(text='‚úÖ' + a_num, callback_data='NO_CB'))
            question_text = '–ü—Ä–∏—Å–≤–æ–π—Ç–µ –±–∞–ª–ª—ã –¥–∞–Ω–Ω–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –æ—Ç 0 –¥–æ 3'
            buttons_labels = [str(i) for i in range(0, 4)]
            print(buttons_labels)
            buttons_callback = (f'ANS_{a_num}_{a_type}_{i}' for i in buttons_labels)
            markup = types.InlineKeyboardMarkup(row_width=4)
            markup.add(*(types.InlineKeyboardButton(text=i, callback_data=j) for i, j in zip(buttons_labels,
                                                                                             buttons_callback)))
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.return_cur_question_format(self.questions[self.cur_question]),
                                       reply_markup=e_markup, parse_mode='html')
            self.bot.send_message(call.message.chat.id, question_text, reply_markup=markup, parse_mode='html')

        elif call.data[0:3:] == 'ANS':
            a_num, a_type, value = call.data.split('_')[1::]
            if a_type == 'LEFT':
                self.l_scores += int(value)
                self.r_scores += 3 - int(value)
                self.values_buffer = (int(value), )
            elif a_type == 'RIGHT':
                self.r_scores += int(value)
                self.l_scores += 3 - int(value)
                self.values_buffer = (3 - int(value), int(value))
            texts = {
                'A': 'A.{0}\nB.{1}\n\n',
                'B': 'A.{1}\nB.{0}\n\n'
            }
            text = '–û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–ª–ª—ã –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –≤—Ç–æ—Ä–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.\n\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:\n' + texts[a_num].format(value,
                                                                                                                    3 - int(value)) + '–ò–¥–µ–º –¥–∞–ª—å—à–µ?'
            e_markup = types.InlineKeyboardMarkup(row_width=1)
            e_markup.add(types.InlineKeyboardButton(text=f'‚úÖ{value}', callback_data='NO_CB'))

            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=e_markup, parse_mode='html')
            buttons_labels = ('–ò–∑–º–µ–Ω–∏—Ç—å', '–í—Å–µ –≤–µ—Ä–Ω–æ')
            buttons_callback = ('change', 'next_question')
            markup = types.InlineKeyboardMarkup(row_width=4)
            markup.add(*(types.InlineKeyboardButton(text=i, callback_data=j) for i, j in zip(buttons_labels,
                                                                                             buttons_callback)))
            self.bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode='html')
        else:
            content = (('–ù–µ –Ω–∞–¥–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É', "CAACAgIAAxkBAAEBF5NfGuC_VII-nWv3kx3vr_FG5s85dgACWwEAAhZ8aA"
                                                          "On5hm7YVB7pBoE"),
                       ('–ü—Ä–æ—à—É –≤–∞—Å, –Ω–µ –Ω–∞–¥–æ –Ω–∞ –Ω–µ–µ –Ω–∞–∂–∏–º–∞—Ç—å!', 'CAACAgIAAxkBAAEBF8pfGuaFWwzW3u0jCtlkwKZJ4AfG-wACCgEAA'
                                                               'hZ8aAMGQ9g1JWM_NxoE'),
                       ('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å!', 'CAACAgIAAxkBAAEBF8hfGuZm4LBVGbnwmS5mYx40Sze'
                                                                         'vyAACHAEAAhZ8aANLfie-soC56hoE'),
                       ('–ü—Ä–æ—Å—Ç–æ! –ù–µ –Ω–∞–¥–æ!', 'CAACAgIAAxkBAAEBF71fGuVP6XfAvMTP7nimcsZv_6EwOAACBwEAAhZ8aANVMD-_sgABuU4aB'
                                            'A'))
            self.bot.send_sticker(call.message.chat.id, content[self.bad_action][1])
            self.bot.send_message(call.message.chat.id, content[self.bad_action][0])
            if self.bad_action < 3:
                self.bad_action += 1

    def disclaimer(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data='START_TEST'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def start(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏', callback_data='CALL_DISC'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def send_question(self, chat_id):
        print('Here')
        print(self.cur_question)
        if self.cur_question <= 22:
            q_data = self.questions[self.cur_question]
            markup = types.InlineKeyboardMarkup(row_width=2)
            buttons_labels = ('A', 'B')
            buttons_callback = (f'Q_{i[1]}_{j}_{i[2]}' for i, j in zip(q_data, buttons_labels))
            markup.add(*(types.InlineKeyboardButton(text=i, callback_data=j) for i, j in zip(buttons_labels,
                                                                                             buttons_callback)))
            self.bot.send_message(chat_id, self.return_cur_question_format(q_data), reply_markup=markup, parse_mode='html')
        else:
            self.finish_test(chat_id)

    def return_rang(self):
        res_score = self.l_scores - self.r_scores
        return {
            res_score < -13: '–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä',
            -13 <= res_score <= 13: '–ü—Ä–∞–≥–º–∞—Ç–∏–∫',
            res_score > 13: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä'
        }[True]

    def finish_test(self, chat_id):
        print(self.return_rang())
        self.bot.send_sticker(chat_id, "CAACAgIAAxkBAAEBF5FfGuCJrOc68PUrUVsDehIeWc6dVwACQAEAAhZ8aAPOt9pjb9"
                                       "XRXRoE")
        text = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞\n\n‚úÖ<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.return_rang()}</b>\n\n–ü–æ–¥—Ä–æ–±–Ω—É—é '\
               f'–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –í—ã —É–∑–Ω–∞–µ—Ç–µ —É —Ç—Ä–µ–Ω–µ—Ä–∞.–£—Å–ø–µ—Ö–æ–≤! üòâ'
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='html')

    def start_test(self, chat_id):
        self.send_question(chat_id)


class SimpleUserPSTest:
    def __init__(self, msg, bot_ref, texts):
        self.on_test = False
        self.bot = bot_ref
        self.id = msg.chat.id
        self.try_times = 0
        self.test = PSTest('CSI_TEST.xlsx', bot_ref, texts)
        self.tmp = ('CAACAgQAAxkBAAEBF5VfGuF1UwSkKxGqd-t1XVyEAAGnaycAAuoAA9P3ri6fKevj_Rz_pRoE',
               'CAACAgIAAxkBAAEBF7tfGuUx8tRgvxEEv7VZ_FxGB3zFWwAC_Q4AAulVBRgBBl-wMEdEvBoE',
               'CAACAgIAAxkBAAEBF7lfGuTvKXFjKIBjKLHVFtvE6VHwjAACAgADkp8eETUZdc2pKL8bGgQ',
               'CAACAgIAAxkBAAEBF7dfGuTtzxFE2Z6UlmGlHcXYz1ymcAACAQADkp8eEQpfUwLsF-b2GgQ')
        self.auth(msg)

    def get_code(self, msg):
        date = datetime.datetime.now()
        date += datetime.timedelta(seconds=3600 * 3)
        key = f'SW{date.month}{date.day}{str(date.year)[2::]}'
        print(key)
        if msg.text == key:
            with open('logger.txt', 'a') as logger:
                logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "CSI"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                             f' - {datetime.datetime.today()}\n')
            self.test.change_state('START')
            self.on_test = True
            self.bot.send_sticker(msg.chat.id, random.choice(self.tmp))
            self.test.start(msg.chat.id)
        else:
            self.try_times += 1
            if self.try_times <= 5:
                self.bot.send_message(msg.chat.id, f'–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–¥ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ '
                                                   f'–ø–æ–ø—ã—Ç–∫—É.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{6 - self.try_times}</b>',
                                      parse_mode='html')
                self.bot.register_next_step_handler(msg, self.get_code)
            else:
                self.test.change_state('BLOCKED')
                with open('logger.txt', 'a') as logger:
                    logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "CSI"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!  - '
                                 f'{datetime.datetime.today()}\n')
                self.bot.send_message(msg.chat.id, '–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ'
                                                   ' –ø—Ä–æ–±–ª–µ–º—É –õ–∏–Ω–µ, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç ;)\n@lina_chandler')

    def auth(self, msg):
        self.bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</b> –∏'
                                           ' –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>HW2L</i>', parse_mode='html')
        self.bot.register_next_step_handler(msg, self.get_code)

    def handler(self, message):
        if self.on_test:
            self.bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç!')
        else:
            self.on_test = True
            self.test.start(message.chat.id)

    def callback_handler(self, call):
        print(call.data)
        if call.data == 'CALL_DISC':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.change_state('DISCLAIMER')
            self.test.disclaimer(call.message.chat.id)

        elif call.data == 'START_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.start_test(call.message.chat.id)

        elif call.data == 'RESTART_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=None, parse_mode='html')
            self.test = PSTest('CSI_TEST.xlsx', self.bot, self.test.texts)
            self.test.start(call.message.chat.id)
        else:
            self.test.handler(call)


env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
API_TOKEN = os.getenv('API_TOKEN_CSI')
bot = telebot.TeleBot(API_TOKEN)
users = {}
texts_literal = {
        'DISCLAIMER': '–û—Ç–ª–∏—á–Ω–æ!\n\n<b>üìå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ '
                      '22 –ø–∞—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.\n\n–í –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ 3 –±–∞–ª–ª–∞ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤ '
                      '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ê –∏–ª–∏ –ë. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å '
                      '—Å–ª–µ–¥—É—é—â–∏–µ –±–∞–ª–ª—ã ‚Äì 0, 1, 2 –∏–ª–∏ 3.\n\n<b>0 = –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞\n1 = –∏–Ω–æ–≥–¥–∞\n2 = —á–∞—Å—Ç–æ\n3 = –ø–æ—á—Ç–∏ '
                      '–≤—Å–µ–≥–¥–∞</b>\n\nüîπ–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 3.\n\n'
                      '<b>–ù–∞–ø—Ä–∏–º–µ—Ä:\n</b>–ê. –Ø —Å–æ–±–ª—é–¥–∞—é —Ç—Ä–∞–¥–∏—Ü–∏–∏ - 2\n–ë. –Ø –Ω–∞—Ä—É—à–∞—é —Ç—Ä–∞–¥–∏—Ü–∏–∏ - 1\n\n‚òù–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ'
                      ' –ø—Ä–æ —Ç–æ,<b> –∫–∞–∫ –í—ã —Å–µ–±—è –æ–±—ã—á–Ω–æ –≤–µ–¥–µ—Ç–µ</b>, –∞ –Ω–µ –ø—Ä–æ —Ç–æ, –∫–∞–∫–∏–º–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –±—ã—Ç—å.',
        'START': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å üëãüèº\n\n<b>–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç "–°—Ç–∏–ª—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –ø–µ—Ä–µ–º–µ–Ω"?</b>'
    }


@bot.message_handler(content_types='text')
def handler(message):
    if message.text == '/start':
        try:
            users[message.chat.id].handler(message)
        except KeyError:
            users[message.chat.id] = SimpleUserPSTest(message, bot, texts_literal)
    elif users[message.chat.id].test.state == 'BLOCKED':
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                          'e –∫–Ω–æ–ø–∫–∏! :)')
    else:
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏! :)')


@bot.callback_query_handler(func=lambda call: True)
def smo(call):
    try:
        users[call.message.chat.id].callback_handler(call)
    except KeyError as e:
        users[call.message.chat.id] = SimpleUserPSTest(call.message, bot, texts_literal)


class WebhookServer(object):
    # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 7771,
        'engine.autoreload.on': False
    })
    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
