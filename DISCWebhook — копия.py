import telebot
from telebot import apihelper
from telebot import types
from openpyxl import load_workbook
from telebot import apihelper
import re
import re
import os
from dotenv import load_dotenv
import cherrypy
import datetime


def parse_from_xlsx_data(data):
    pass


class DISCTest:
    def __init__(self, filename, bot_ref, texts):
        self.texts = texts
        self.bot = bot_ref
        self.state = 'START'
        self.flag = None
        self.questions = self.create_test_data(filename)
        self.cur_q = 1
        self.types_scores = {
            '–î': 0,
            '–í': 0,
            '–£': 0,
            '–°': 0
        }

    def change_state(self, new_state):
        self.state = new_state

    def return_cur_text(self):
        return self.texts[self.state]

    def validate_editing(self, new_args):
        pass

    def handler(self, call):
        if call.data != 'NO_CB':

            self.types_scores[call.data] += 1
            index = tuple(self.questions.keys())[self.cur_q - 1]['scores'].index(call.data)
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(text='' + call.message.json['reply_markup']['inline_keyboard'][int(index)][0]['text'],
                                                  callback_data='NO_CB'))

            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n{tuple(self.questions.keys())[self.cur_q - 1]["scores"][index]}',
                                                              reply_markup=markup, parse_mode='html')
            self.send_question(call.message.chat.id)
        else:
            self.bot.send_message(call.message.chat.id, '–ù–µ –Ω–∞–¥–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É')


    @staticmethod
    def create_test_data(path='TEST1.xlsx', rows=58, cols=5):
        test = {}
        wb = load_workbook(filename=path)
        sheet = wb.active
        alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        res = []
        for i in range(2, rows):
            col = []
            for j in range(cols):
                tmp = ''.join((alph[j], str(i)))
                col.append(sheet[tmp].value)
            if col[0] is None:
                col = col[2:4]
            res.append(col)

        for i in res:
            if len(i) != 2:
                tmp = i[1:4]
                test.update([(tmp[0], {'answers': [], 'scores': []})])
                test[tmp[0]]['answers'].append(tmp[1])
                test[tmp[0]]['scores'].append(tmp[2])
            else:
                test[tmp[0]]['answers'].append(i[0])
                test[tmp[0]]['scores'].append(i[1])
        return test

    def disclaimer(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data='START_TEST'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def start(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏', callback_data='CALL_DISC'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def send_question(self, chat_id):
        try:
            q_data = tuple(self.questions.keys())[self.cur_q - 1]
            question_text = '<b>{0} –∏–∑ 15\n\n{1}\n\n{2}\n{3}\n{4]\n{5}</b>'.format(self.cur_q, q_data,
                                                                                   *self.questions[q_data]['answers'])
            button_labels = ('–ê', '–ë', '–í', '–ì')
            buttons_callback = self.questions[q_data]['scores']
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(*(types.InlineKeyboardButton(text=i, callback_data=j) for i, j in zip(button_labels,
                                                                                             buttons_callback)))
            self.bot.send_message(chat_id, question_text, reply_markup=markup, parse_mode='html')
        except IndexError:
            self.finish_test(chat_id)

    def finish_test(self, chat_id):
        with open('content/psyho_types.png', 'rb') as psyho_types_image:
            self.bot.send_photo(chat_id, psyho_types_image)
        text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞<b>\n"‚úÖ–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: </b>\n\n–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π:  {0}\n–í–ª–∏—è—Ç–µ–ª—å–Ω—ã–π: {1}\n' \
               '–£—Å—Ç–æ–π—á–∏–≤—ã–π: {2}\n–°–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∏–π: {3}\n\nüìå–í–∞—à–∏–º –≤–µ–¥—É—â–∏–º –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±—Ä–∞–ª ' \
               '–Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.\n\n–ï—Å–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ—Ç–∏–ø—ã –Ω–∞–±—Ä–∞–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –æ—á–∫–æ–≤, —Ç–æ –æ–Ω–∏' \
               ' –≤–∞–º –Ω–µ —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã.\n\nüî∏–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –ø—Å–∏—Ö–æ—Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±—Ä–∞–ª —Å—Ç–æ–ª—å–∫–æ –∂–µ –∏–ª–∏ –Ω–∞ 1-2' \
               ' –æ—á–∫–∞ –º–µ–Ω—å—à–µ, —Ç–æ —ç—Ç–æ ‚Äì –≤–∞—à –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã –≤ ' \
               '–ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n\n\n–£—Å–ø–µ—Ö–æ–≤!'.format(*self.types_scores.values())
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='html')

    def start_test(self, chat_id):
        self.send_question(chat_id)


class SimpleUserTestTeamwork:
    def __init__(self, msg, bot_ref, texts):
        self.on_test = False
        self.bot = bot_ref
        self.try_times = 0
        self.id = msg.chat.id
        self.test = DISCTest('DISC.xlsx', bot_ref, texts)
        self.auth(msg)

    def auth(self, msg):
        self.bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</b> –∏'
                                           ' –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>HW2L</i>', parse_mode='html')
        self.bot.register_next_step_handler(msg, self.get_code)

    def get_code(self, msg):
        date = datetime.datetime.now()
        date += datetime.timedelta(seconds=3600 * 3)
        print(date)
        key = f'SW{date.month}{date.day}{str(date.year)[2::]}'
        print(key)
        if msg.text == key:
            with open('logger.txt', 'a') as logger:
                logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "DISC"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                             f' - {datetime.datetime.today()}\n')
            self.test.change_state('START')
            self.on_test = True
            self.test.start(msg.chat.id)
        else:
            self.try_times += 1
            if self.try_times <= 5:
                self.bot.send_message(msg.chat.id, f'–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–¥ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ '
                                                   f'–ø–æ–ø—ã—Ç–∫—É.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{6 - self.try_times}</b>',
                                      parse_mode='html')
                self.bot.register_next_step_handler(msg, self.get_code)
            else:
                self.test.change_state('BLOCKED')
                with open('logger.txt', 'a') as logger:
                    logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "DISC"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!  - '
                                 f'{datetime.datetime.today()}\n')
                self.bot.send_message(msg.chat.id, '–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ'
                                                   ' –ø—Ä–æ–±–ª–µ–º—É –õ–∏–Ω–µ, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç ;)\n@lina_chandler')
    def handler(self, message):
        if self.on_test:
            self.bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç!')
        else:
            self.on_test = True
            self.test.start(message.chat.id)

    def callback_handler(self, call):
        if call.data == 'CALL_DISC':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.change_state('DISCLAIMER')
            self.test.disclaimer(call.message.chat.id)

        elif call.data == 'START_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.start_test(call.message.chat.id)

        elif call.data == 'RESTART_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=None, parse_mode='html')
            self.test = DISCTest('DISC.xlsx', self.bot, self.test.texts)
            self.test.start(call.message.chat.id)
        else:
            self.test.handler(call)


env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
API_TOKEN = os.getenv('API_TOKEN_ILYIN')
bot = telebot.TeleBot(API_TOKEN)
users = {}
texts_literal = {
        'DISCLAIMER': '–û—Ç–ª–∏—á–Ω–æ!\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏,'
                      ' –≤–∂–∏–≤–∏—Ç–µ—Å—å –≤ –Ω–∏—Ö.\n\n‚òùÔ∏è–û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–∞–∫, –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ (–µ—Å–ª–∏ –≤—ã –±—ã–ª–∏ –≤ –ø–æ–¥–æ–±–Ω–æ–π '
                      '—Å–∏—Ç—É–∞—Ü–∏–∏) –∏–ª–∏ –∫–∞–∫ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ—Å—Ç—É–ø–∏—Ç—å (–µ—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –≤–∞–º –Ω–µ –∑–Ω–∞–∫–æ–º–∞).',
        'START': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å üëãüèº\n\n<b>–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Å–∏—Ö–æ—Ç–∏–ø–∞?</b>'
    }


@bot.message_handler(content_types='text')
def handler(message):
    if message.text == '/start':
        try:
            users[message.chat.id].handler(message)
        except KeyError:
            users[message.chat.id] = SimpleUserTestTeamwork(message, bot, texts_literal)
    elif users[message.chat.id].test.state == 'BLOCKED':
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                          'e –∫–Ω–æ–ø–∫–∏! :)')
    else:
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏! :)')


@bot.callback_query_handler(func=lambda call: True)
def smo(call):
    try:
        users[call.message.chat.id].callback_handler(call)
    except KeyError as e:
        users[call.message.chat.id] = SimpleUserTestTeamwork(call.message, bot, texts_literal)


class WebhookServer(object):
    # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 7779,
        'engine.autoreload.on': False
    })
    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
