import telebot
from telebot import apihelper
from telebot import types
from openpyxl import load_workbook
from telebot import apihelper
import re
import re
import os
from dotenv import load_dotenv
from threading import Timer
import cherrypy
import datetime


def parse_from_xlsx_data(data):
    pass


questions = ('–û–Ω —Ö–æ—Ä–æ—à–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç', '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–≠—Ç–æ —Ç—Ä—É–¥–Ω–æ, –ª—É—á—à–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏ –¥–æ–¥–µ–ª–∞—Ç—å –ø–æ–ø–æ–∑–∂–µ¬ª',
             '–û–Ω —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å —ç—Ç–∏–º', '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–Ø –º–æ–≥—É –≥–æ—Ä–¥–∏—Ç—å—Å—è —Å–æ–±–æ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —ç—Ç–∏–º¬ª',
             '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–ü–æ—Ö–æ–∂–µ, —Å–Ω–æ–≤–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è¬ª ', '–û–Ω –Ω–µ–¥–æ–≤–æ–ª–µ–Ω —Ç–µ–º, —á—Ç–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å', '–û–Ω —É—Å—Ç–∞–ª',
             '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–Ø –ø–æ–ø—Ä–æ—à—É –ª—É—á—à–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –º–Ω–µ –ø–æ–º–æ—á—å¬ª', '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–•–æ—Ä–æ—à–æ –±—ã —ç—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª',
             '–û–Ω –¥—É–º–∞–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–û–Ω –±–æ–∏—Ç—Å—è, —á—Ç–æ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª –Ω–µ —Ç–∞–∫', '–≠—Ç–æ –µ–º—É –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',
             '–û–Ω –Ω–µ —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –ø–ª–æ—Ö–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å', '–û–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö',
             '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–Ø –ª—É—á—à–µ —Å–¥–µ–ª–∞—é —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ç—Ä—É–¥–Ω–µ–µ¬ª', '–û–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å',
             '–û–Ω –¥—É–º–∞–µ—Ç: ¬´–ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä—É–¥–Ω–æ, —Ç–æ –º–Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö¬ª',
             '–û–Ω –¥—É–º–∞–µ—Ç, —á—Ç–æ –Ω–µ —Å—É–º–µ–µ—Ç —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ')


class HeckHausenTest:
    def __init__(self, user_id: int, bot_ref, texts: dict):
        self.timer = None
        self.score_storage = {i: 0 for i in range(1, 19)}
        self.id = user_id
        self.texts = texts
        self.bot = bot_ref
        self.buffer = None
        self.state = 'START'
        self.flag = None
        self.cur_picture_ptr = 1

    def change_state(self, new_state: str):
        self.state = new_state

    def return_result(self) -> tuple:
        res = [0, 0, 0]
        for q_num in self.score_storage.keys():
            if q_num in (4, 9, 14, 15, 17):
                res[0] += self.score_storage[q_num]
            elif q_num in (5, 7, 11, 13):
                res[2] += self.score_storage[q_num]
            elif q_num in (2, 6, 8, 12, 16, 18):
                res[1] += self.score_storage[q_num]
            else:
                continue
        return tuple(res)

    def return_cur_text(self):
        return self.texts[self.state]

    def start_timer(self):
        self.timer = Timer(3, self.edit_photo)
        self.timer.start()

    def edit_photo(self):
        text = f'<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.cur_picture_ptr} –∏–∑ 6</b>'
        self.bot.send_message(self.buffer.chat.id, text=text, parse_mode='html')

    def validate_editing(self, new_args):
        pass

    def handler(self, call):
        self.bot.send_message(call.message.chat.id, '–ù–µ –Ω–∞–¥–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É')

    def disclaimer(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data='START_TEST'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    @staticmethod
    def return_question_list() -> str:
        global questions
        return '\n'.join(tuple(f'<b>{i + 1}</b>. {questions[i]}' for i in range(18)))

    def start(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏', callback_data='CALL_DISC'))
        self.bot.send_message(chat_id, self.return_cur_text(), reply_markup=markup, parse_mode='html')

    def process_right_answer(self, msg):
        try:
            questions_numbers = tuple(int(i.strip()) for i in msg.text.split(','))
            for number in questions_numbers:
                self.score_storage[number] += 1
            self.cur_picture_ptr += 1
            self.bot.delete_message(self.buffer.chat.id, self.buffer.message_id)
            self.send_question(msg.chat.id)
        except (ValueError, TypeError):
            if msg.text == '-':
                self.cur_picture_ptr += 1
                self.bot.delete_message(self.buffer.chat.id, self.buffer.message_id)
                self.send_question(msg.chat.id)
            else:
                self.bot.send_message(chat_id=msg.chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–≤–µ–¥–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –≤—Å–µ–º'
                                                                ' –ø—Ä–∞–≤–∏–ª–∞–º!')
                self.bot.register_next_step_handler(msg, self.process_right_answer)
        except KeyError:
            self.bot.send_message(chat_id=msg.chat.id, text='–í–∞–º –¥–∞–Ω–æ –≤—Å–µ–≥–æ-–ª–∏—à—å 18 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–æ–º–µ—Ä–∞ 1 –ø–æ –Ω–æ–º–µ—Ä 18!'
                                                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∑–∞ –¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!')
            self.bot.register_next_step_handler(msg, self.process_right_answer)

    def process_wrong_answer(self, msg):
        self.cur_picture_ptr += 1
        self.bot.delete_message(self.buffer.chat.id, self.buffer.message_id)
        self.send_question(msg.chat.id)

    def send_question(self, chat_id):
        try:
            with open(os.path.join('content', 'Heckhausen', f'{self.cur_picture_ptr}.jpg'), 'rb') as emotion_photo:
                self.bot.send_photo(chat_id, emotion_photo, caption=f'<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.cur_picture_ptr} –∏–∑ 6</b>',
                                    parse_mode='html')
                self.buffer = self.bot.send_message(chat_id=chat_id, text=self.return_question_list(),
                                                    parse_mode='html')
                msg_txt = '–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–æ–º–µ—Ä–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ, –ø–æ –í–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, <b>–ø–æ–¥—Ö–æ–¥—è—Ç</b> –∫ ' \
                          '–¥–∞–Ω–Ω–æ–º—É —Ä–∏—Å—É–Ω–∫—É.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n1,6,9,13,18\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ' \
                          '—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏–ª–∏ –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö —Å–æ–≤—Å–µ–º. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ñ–∏—Å</i>'
                self.bot.send_message(chat_id, text=msg_txt, parse_mode='html')
                self.bot.register_next_step_handler(self.buffer, self.process_right_answer)
        except (IndexError, FileNotFoundError) as error:
            self.finish_test(chat_id)

    def finish_test(self, chat_id):
        text = '<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\nüî∏ –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —É—Å–ø–µ—Ö—É –∏–ª–∏ –Ω–∞–¥–µ–∂–¥–∞ –Ω–∞ —É—Å–ø–µ—Ö - <b>{0}</b>\nüî∏ –ë–æ—è–∑–Ω—å –Ω–µ—É–¥–∞—á–∏ —Å '\
               '–æ—â—É—â–µ–Ω–∏–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - <b>{1}</b>\nüî∏ –ë–æ—è–∑–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–µ—É–¥–∞—á–∏ - <b>{2}</b>'\
               ''.format(*self.return_result())
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', callback_data='RESTART_TEST'))
        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='html')

    def start_test(self, chat_id):
        self.send_question(chat_id)


class SimpleUserHeckHausenTest:
    def __init__(self, msg, bot_ref, texts):
        self.on_test = False
        self.bot = bot_ref
        self.id = msg.chat.id
        self.try_times = 0
        self.test = HeckHausenTest(msg.chat.id, bot_ref, texts)
        self.auth(msg)

    def handler(self, message):
        if self.on_test:
            self.bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç!')
        else:
            self.on_test = True
            self.test.start(message.chat.id)

    def auth(self, msg):
        self.bot.send_message(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</b> –∏'
                                           ' –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <i>HW2L</i>', parse_mode='html')
        self.bot.register_next_step_handler(msg, self.get_code)

    def get_code(self, msg):
        date = datetime.datetime.now()
        date += datetime.timedelta(seconds=3600 * 3)
        key = f'SW{date.month}{date.day}{str(date.year)[2::]}'
        if msg.text == key:
            with open('logger.txt', 'a') as logger:
                logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–•–µ–∫—Ö–∞—É–∑–µ–Ω"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                             f' - {datetime.datetime.today()}\n')
            self.test.change_state('START')
            self.on_test = True
            self.test.start(msg.chat.id)
        else:
            self.try_times += 1
            if self.try_times <= 5:
                self.bot.send_message(msg.chat.id, f'–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–¥ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ '
                                                   f'–ø–æ–ø—ã—Ç–∫—É.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{6 - self.try_times}</b>',
                                      parse_mode='html')
                self.bot.register_next_step_handler(msg, self.get_code)
            else:
                self.test.change_state('BLOCKED')
                with open('logger.txt', 'a') as logger:
                    logger.write(f'[–¢–µ—Å—Ç–æ–±–æ—Ç "–•–µ–∫—Ö–∞—É–∑–µ–Ω"]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {msg.chat.id} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!  - '
                                 f'{datetime.datetime.today()}\n')
                self.bot.send_message(msg.chat.id, '–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ'
                                                   ' –ø—Ä–æ–±–ª–µ–º—É –õ–∏–Ω–µ, –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç ;)\n@lina_chandler')

    def callback_handler(self, call):
        if call.data == 'CALL_DISC':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.change_state('DISCLAIMER')
            self.test.disclaimer(call.message.chat.id)

        elif call.data == 'START_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=self.test.return_cur_text(), reply_markup=None, parse_mode='html')
            self.test.start_test(call.message.chat.id)

        elif call.data == 'RESTART_TEST':
            self.bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       text=call.message.text, reply_markup=None, parse_mode='html')
            self.test = HeckHausenTest(call.message.chat.id, self.bot, self.test.texts)
            self.test.start(call.message.chat.id)
        else:
            self.test.handler(call)


env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
API_TOKEN = os.getenv('API_TOKEN_HECKHAUSEN')
bot = telebot.TeleBot(API_TOKEN)
users = {}
texts_literal = {
        'DISCLAIMER': '–û—Ç–ª–∏—á–Ω–æ!\n\n–ú—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º 6 —Ä–∏—Å—É–Ω–∫–æ–≤ –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –ø–æ –ø–æ–≤–æ–¥—É —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ –Ω–∏—Ö'
                      ' –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ. –ù–∞ —Ä–∏—Å—É–Ω–∫–∞—Ö –≤—ã —É–≤–∏–¥–∏—Ç–µ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. '
                      '\n\n‚ñ´Ô∏è–ì–ª—è–¥—è –Ω–∞ —Ä–∏—Å—É–Ω–∫–∏, –≤—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç, –æ —á–µ–º –¥—É–º–∞—é—Ç, —á—Ç–æ —á—É–≤—Å—Ç–≤—É—é—Ç. '
                      '–ù–∞–≤–µ—Ä–Ω—è–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å –æ —Å—Ö–æ–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–º —É–∂–µ –ø—Ä–∏—à–ª–æ—Å—å –ø–æ–±—ã–≤–∞—Ç—å.'
                      '\n\n‚ñ´Ô∏è–í —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–æ–∂–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É. –ú–æ–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –¥–µ–ª–æ–º –æ—Ö–æ—Ç–Ω–æ –∏–ª–∏ '
                      '–±–µ–∑ –∂–µ–ª–∞–Ω–∏—è. –ú–æ–∂–Ω–æ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏–ª–∏ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º,'
                      ' —á—Ç–æ —Ç—ã —á—Ç–æ-—Ç–æ —Å–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å. –ö—Ç–æ-—Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –±–æ—è–∑–Ω—å, —á—Ç–æ –æ–Ω –≤—Å–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç –∏–ª–∏ –Ω–µ '
                      '—Å–ø—Ä–∞–≤–∏—Ç—Å—è. –ü–æ –∫–∞–∂–¥–æ–º—É —Ä–∏—Å—É–Ω–∫—É –º–æ–∂–Ω–æ —Å–æ—á–∏–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –í—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –º–æ–≥–ª–∏ –±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ–π '
                      '–Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞—Å—Å–∫–∞–∑.\n\n‚ñ´Ô∏è–ú—ã –∂–µ –ø–æ—Å—Ç—É–ø–∏–º –ø—Ä–æ—â–µ. –í–∞–º –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π.\n'
                      '\n<i>‚úÖ–ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ª–∏—à—å –Ω–∞–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —Ç–æ–º—É –∏–ª–∏'
                      ' –∏–Ω–æ–º—É —Ä–∏—Å—É–Ω–∫—É.</i>\n\n<b>‚ö†Ô∏è–¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã –≤—ã '
                      '–±—É–¥–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∞ –Ω–µ –æ–±–¥—É–º—ã–≤–∞—è, –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–∑–Ω–∞–Ω '
                      '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.</b>',
        'START': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å üëãüèº\n\n<b>–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º?</b>\n\n–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º '
                 '–ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –≤—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ'
                 ' –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.'
    }


@bot.message_handler(content_types='text')
def handler(message):
    if message.text == '/start':
        try:
            users[message.chat.id].handler(message)
        except KeyError:
            users[message.chat.id] = SimpleUserHeckHausenTest(message, bot, texts_literal)
    elif users[message.chat.id].test.state == 'BLOCKED':
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç'
                                          'e –∫–Ω–æ–ø–∫–∏! :)')
    else:
        bot.send_message(message.chat.id, '–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏! :)')


@bot.callback_query_handler(func=lambda call: True)
def smo(call):
    try:
        users[call.message.chat.id].callback_handler(call)
    except KeyError as e:
        users[call.message.chat.id] = SimpleUserHeckHausenTest(call.message, bot, texts_literal)


class WebhookServer(object):
    # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 7784,
        'engine.autoreload.on': False
    })
    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
